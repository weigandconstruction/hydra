defmodule <%= @module %>.<%= @local_module %> do
  @moduledoc """
  API for <%= @local_module %>
  """

  <%= for operation <- @path.operations do %>
    @doc """
    <%= operation.description %><%= if Hydra.Helpers.has_request_body?(operation) do %>

    ## Body Parameters

<%= Hydra.Helpers.request_body_parameters(operation) |> Enum.map(fn body_param -> "    * `#{body_param.name}` - `#{body_param.type}`#{if body_param.required, do: " (required)", else: " (optional)"}#{if body_param.description, do: " - #{body_param.description}", else: ""}" end) |> Enum.join("\n") %>
  <% end %>
    """
    def <%= operation.method %>(<%= [Hydra.Helpers.function_parameters(@path, operation) |> Enum.map(& &1.internal_name), if(Hydra.Helpers.has_request_body?(operation), do: ["body"], else: [])] |> List.flatten() |> Enum.join(", ") %>) do
      Procore.Client.request(
        method: :<%= operation.method %>,
        url: "<%= Hydra.Helpers.interpolated_path(@path.path) %>",

        <%= if !Enum.empty?(Hydra.Helpers.header_parameters(@path, operation)) do %>
          headers: [
          <%= for param <-  Hydra.Helpers.header_parameters(@path, operation) do %>
            {"<%= param.name %>", <%= param.internal_name %>},
          <% end %>
          ],
        <% end %>

        <%= if !Enum.empty?(Hydra.Helpers.query_parameters(@path, operation)) do %>
          params: [
          <%= for param <-  Hydra.Helpers.query_parameters(@path, operation) do %>
            "<%= param.name %>": <%= param.internal_name %>,
          <% end %>
          ],
        <% end %>

        <%= if Hydra.Helpers.has_request_body?(operation) do %>
          json: body,
        <% end %>
      )
    end
  <% end %>
end
